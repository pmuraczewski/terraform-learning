# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
      working-directory: 'src/ExampleWebApplication'
    - name: Build
      run: dotnet build --no-restore
      working-directory: 'src/ExampleWebApplication'
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      working-directory: 'src/ExampleWebApplication'
    - name: Run tests and collect coverage
      run: dotnet test --no-restore --nologo --collect:"XPlat Code Coverage" --results-directory "./TestResults"
      working-directory: 'src/ExampleWebApplication'
    - name: Generate Coverage Report
      run: reportgenerator "-reports:./TestResults/**/*.cobertura.xml" "-targetdir:./CoverageReport" -reporttypes:"Cobertura"
      working-directory: 'src/ExampleWebApplication'
    - name: Check Coverage Percentage
      run: |
        COVERAGE_THRESHOLD=80

        LINE_COVERAGE=$(grep -oPm1 "(?<=line-rate=\")[^\"]+" ./CoverageReport/Cobertura.xml)
        LINE_COVERAGE=$(echo "$LINE_COVERAGE * 100" | bc -l)
        echo "Line coverage is $LINE_COVERAGE%"

        BRANCH_COVERAGE=$(grep -oPm1 "(?<=branch-rate=\")[^\"]+" ./CoverageReport/Cobertura.xml)
        BRANCH_COVERAGE=$(echo "$BRANCH_COVERAGE * 100" | bc -l)
        echo "Branch coverage is $BRANCH_COVERAGE%"
      working-directory: 'src/ExampleWebApplication'
